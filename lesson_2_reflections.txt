What happens when you initialize a repository? Why do you need to do it?

    -   An empty git repository is initialized.
    -   This repository does not contain any commits and any existing files are considered
        untracked by default
    -   Git version control can be used for the files and sub-directories in the directory
        for which a git repository has been initialized

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    -   Staging area is an intermediate logical location where we can place
        any changed files before committing the change to repository
    -   Provides flexibility by allowing a subset of changes to be committed
    -   Allows us to select files from the working directory which we want to
        track using git

How can you use the staging area to make sure you have one commit per logical
change?
    -   By adding only those files to the staging area which constitute a logical
        change, even if the working directory has additional changes
    -   Then commit the changes in the staging area

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    -   Experimenting with new features in program
    -   Working on changes that might be deemed risky for master branches
    -   Branches help by allowing changes to be committed to a branch without
        affecting any other branches

How do the diagrams help you visualize the branch structure?
    -   Form graph with arrows from a commit to its parent that can be used
        for visualizing reachability

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
